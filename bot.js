require('dotenv').config();
const { Telegraf, Scenes, session, Markup } = require('telegraf');
const fs = require('fs');
const { initializeSheet, addOrder, cancelOrder, getActiveOrders, getVenueData, sheets, updateVenueAddress, updateTodayOrders } = require('./sheets');
const schedule = require('node-schedule');

// Validate environment variables
const requiredEnvVars = ['BOT_TOKEN', 'SPREADSHEET_ID'];
for (const envVar of requiredEnvVars) {
    if (!process.env[envVar]) {
        console.error(`${envVar} is not defined in .env file`);
        process.exit(1);
    }
}

// Initialize bot
const bot = new Telegraf(process.env.BOT_TOKEN);

// User data management
const userData = {};
try {
    Object.assign(userData, JSON.parse(fs.readFileSync('userData.json', 'utf8')));
} catch (error) {
    console.log('No existing user data found, starting fresh');
}

const saveUserData = () => fs.writeFileSync('userData.json', JSON.stringify(userData, null, 2));

// Keyboards
const keyboards = {
    main: Markup.keyboard([
        ['‚ùÑÔ∏è –ó–∞–∫–∞–∑–∞—Ç—å –ª—ë–¥ ‚ùÑÔ∏è', '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑']
    ]).resize(),

    order: Markup.keyboard([
        ['30 –∫–≥', '40 –∫–≥', '50 –∫–≥'],
        ['60 –∫–≥', '70 –∫–≥', '80 –∫–≥'],
        ['90 –∫–≥', '100 –∫–≥'],
        ['üîô –ù–∞–∑–∞–¥']
    ]).resize(),

    date: Markup.keyboard([
        ['üìÖ –ù–∞ —Å–µ–≥–æ–¥–Ω—è', 'üìÖ –ù–∞ –∑–∞–≤—Ç—Ä–∞'],
        ['üìÖ –í—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É', 'üîô –ù–∞–∑–∞–¥']
    ]).resize(),

    back: Markup.keyboard([['üîô –ù–∞–∑–∞–¥']]).resize()
};

// Scenes
const venueScene = new Scenes.BaseScene('venue');
const addressScene = new Scenes.BaseScene('address');
const orderScene = new Scenes.BaseScene('order');

// Venue scene handlers
venueScene.enter(async (ctx) => {
    await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–≤–µ–¥–µ–Ω–∏—è:', keyboards.back);
});

venueScene.hears('üîô –ù–∞–∑–∞–¥', async (ctx) => {
    await ctx.reply('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', keyboards.main);
    await ctx.scene.leave();
});

venueScene.hears(/^[^/].+$/, async (ctx) => {
    const { text: venueName, from: { id: userId } } = ctx.message;
    
    if (!userData[userId]) userData[userId] = {};
    userData[userId].venueName = venueName;
    saveUserData();

    await ctx.scene.enter('address');
});

// Address scene handlers
addressScene.enter(async (ctx) => {
    await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –∑–∞–≤–µ–¥–µ–Ω–∏—è:', keyboards.back);
});

addressScene.hears('üîô –ù–∞–∑–∞–¥', async (ctx) => {
    await ctx.scene.enter('venue');
});

addressScene.hears(/^.+$/, async (ctx) => {
    const { text: address, from: { id: userId } } = ctx.message;
    
    userData[userId] = {
        ...userData[userId],
        address,
        isRegistered: true,
        venueId: userId.toString()
    };
    saveUserData();

    try {
        await sheets.spreadsheets.values.append({
            spreadsheetId: process.env.SPREADSHEET_ID,
            range: '–ó–∞–≤–µ–¥–µ–Ω–∏—è!A:D',
            valueInputOption: 'RAW',
            resource: {
                values: [[userData[userId].venueId, userData[userId].venueName, address, 30]]
            }
        });

        await ctx.reply(
            `–û—Ç–ª–∏—á–Ω–æ! –ó–∞–≤–µ–¥–µ–Ω–∏–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ:\n\n` +
            `–ù–∞–∑–≤–∞–Ω–∏–µ: ${userData[userId].venueName}\n` +
            `–ê–¥—Ä–µ—Å: ${address}\n` +
            `–¶–µ–Ω–∞ –∑–∞ –∫–≥: 30 —Å–æ–º\n\n` +
            '–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑:',
            keyboards.main
        );
    } catch (error) {
        console.error('Error creating venue:', error);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∑–∞–≤–µ–¥–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', keyboards.main);
    }
    
    await ctx.scene.leave();
});

// Order scene handlers
orderScene.enter(async (ctx) => {
    const userId = ctx.from.id;
    
    if (!userData[userId]?.isRegistered) {
        await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ –∑–∞–≤–µ–¥–µ–Ω–∏–µ.', keyboards.main);
        await ctx.scene.enter('venue');
        return;
    }

    const venueData = await getVenueData(userData[userId].venueId);
    if (!venueData) {
        await ctx.reply('–û—à–∏–±–∫–∞: –∑–∞–≤–µ–¥–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ –∑–∞–≤–µ–¥–µ–Ω–∏–µ –∑–∞–Ω–æ–≤–æ.');
        await ctx.scene.enter('venue');
        return;
    }
    
    await ctx.reply(
        `–ó–∞–∫–∞–∑ –¥–ª—è ${venueData.name}\n` +
        `–ê–¥—Ä–µ—Å: ${venueData.address}\n` +
        `–¶–µ–Ω–∞: ${venueData.price} —Å–æ–º/–∫–≥\n\n` +
        '–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª—å–¥–∞ (—à–∞–≥ 10 –∫–≥):',
        { reply_markup: keyboards.order.reply_markup }
    );
});

orderScene.hears(/^\d+ –∫–≥$/, async (ctx) => {
    const { text, from: { id: userId } } = ctx.message;
    const amount = parseInt(text);
    
    if (!userData[userId]?.venueId) {
        await ctx.reply('–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–≤–µ–¥–µ–Ω–∏—è –∏ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏!');
        await ctx.scene.enter('venue');
        return;
    }

    // Get venue data to get the correct price
    const venueData = await getVenueData(userData[userId].venueId);
    if (!venueData) {
        await ctx.reply('–û—à–∏–±–∫–∞: –∑–∞–≤–µ–¥–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ –∑–∞–≤–µ–¥–µ–Ω–∏–µ –∑–∞–Ω–æ–≤–æ.');
        await ctx.scene.enter('venue');
        return;
    }

    const pricePerKg = venueData.price;
    const deliveryFee = 100;
    const subtotal = amount * pricePerKg;
    const totalPrice = subtotal + deliveryFee;

    ctx.scene.state = { amount, pricePerKg, deliveryFee, subtotal, totalPrice };

    await ctx.reply(
        `–í—ã–±—Ä–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${amount} –∫–≥\n` +
        `–¶–µ–Ω–∞: ${pricePerKg} —Å–æ–º/–∫–≥\n` +
        `–ü–æ–¥—ã—Ç–æ–≥: ${subtotal} —Å–æ–º\n` +
        `–î–æ—Å—Ç–∞–≤–∫–∞: ${deliveryFee} —Å–æ–º\n` +
        `–ò—Ç–æ–≥–æ —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π: ${totalPrice} —Å–æ–º\n\n` +
        '–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–æ—Å—Ç–∞–≤–∫–∏:',
        keyboards.date
    );
});

orderScene.hears('üìÖ –ù–∞ —Å–µ–≥–æ–¥–Ω—è', async (ctx) => {
    const userId = ctx.from.id;
    const { amount, pricePerKg, deliveryFee, subtotal, totalPrice } = ctx.scene.state;
    const now = new Date();
    // Convert to UTC+6 (Almaty)
    const almatyTime = new Date(now.getTime() + (6 * 60 * 60 * 1000));
    const currentHour = almatyTime.getUTCHours();
    const currentMinutes = almatyTime.getUTCMinutes();

    console.log('Current time in Almaty:', `${currentHour}:${currentMinutes}`);
    console.log('Is order allowed:', currentHour < 17);

    // Check if current time is before 17:00
    if (currentHour >= 17) {
        console.log('Order rejected - time check failed');
        const tomorrow = new Date();
        tomorrow.setDate(tomorrow.getDate() + 1);
        
        await ctx.reply(
            '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∑–∞–∫–∞–∑—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–æ 17:00.\n\n' +
            '–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –¥–∞—Ç—É –¥–æ—Å—Ç–∞–≤–∫–∏:\n' +
            `‚Ä¢ –ó–∞–≤—Ç—Ä–∞ (${tomorrow.toLocaleDateString()})\n` +
            '‚Ä¢ –í—ã–±—Ä–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É',
            keyboards.date
        );
        return;
    }

    console.log('Order accepted - time check passed');
    const deliveryDate = now.toISOString().split('T')[0];

    const success = await addOrder(
        userId,
        userData[userId].venueId,
        userData[userId].address,
        amount,
        deliveryDate,
        now.toISOString()
    );

    if (success) {
        await ctx.reply(
            `–ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω!\n\n` +
            `–ó–∞–≤–µ–¥–µ–Ω–∏–µ: ${userData[userId].venueName}\n` +
            `–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${amount} –∫–≥\n` +
            `–¶–µ–Ω–∞: ${pricePerKg} —Å–æ–º/–∫–≥\n` +
            `–ü–æ–¥—ã—Ç–æ–≥: ${subtotal} —Å–æ–º\n` +
            `–î–æ—Å—Ç–∞–≤–∫–∞: ${deliveryFee} —Å–æ–º\n` +
            `–ò—Ç–æ–≥–æ —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π: ${totalPrice} —Å–æ–º\n` +
            `–ê–¥—Ä–µ—Å: ${userData[userId].address}\n` +
            `–î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏: ${now.toLocaleDateString()}\n\n` +
            `üöö –í–æ–¥–∏—Ç–µ–ª—å –≤—ã–µ–¥–µ—Ç –≤ 17:00`,
            keyboards.main
        );
    } else {
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
    
    await ctx.scene.leave();
});

orderScene.hears('üìÖ –ù–∞ –∑–∞–≤—Ç—Ä–∞', async (ctx) => {
    const userId = ctx.from.id;
    const { amount, pricePerKg, deliveryFee, subtotal, totalPrice } = ctx.scene.state;
    const tomorrow = new Date();
    tomorrow.setDate(tomorrow.getDate() + 1);
    const deliveryDate = tomorrow.toISOString().split('T')[0];

    const success = await addOrder(
        userId,
        userData[userId].venueId,
        userData[userId].address,
        amount,
        deliveryDate,
        new Date().toISOString()
    );

    if (success) {
        await ctx.reply(
            `–ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω!\n\n` +
            `–ó–∞–≤–µ–¥–µ–Ω–∏–µ: ${userData[userId].venueName}\n` +
            `–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${amount} –∫–≥\n` +
            `–¶–µ–Ω–∞: ${pricePerKg} —Å–æ–º/–∫–≥\n` +
            `–ü–æ–¥—ã—Ç–æ–≥: ${subtotal} —Å–æ–º\n` +
            `–î–æ—Å—Ç–∞–≤–∫–∞: ${deliveryFee} —Å–æ–º\n` +
            `–ò—Ç–æ–≥–æ —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π: ${totalPrice} —Å–æ–º\n` +
            `–ê–¥—Ä–µ—Å: ${userData[userId].address}\n` +
            `–î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏: ${tomorrow.toLocaleDateString()}`,
            keyboards.main
        );
    } else {
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
    
    await ctx.scene.leave();
});

orderScene.hears('üìÖ –í—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É', async (ctx) => {
    // Generate next 7 days
    const dates = [];
    for (let i = 0; i < 7; i++) {
        const date = new Date();
        date.setDate(date.getDate() + i);
        dates.push(date);
    }

    // Create keyboard with dates (3 buttons per row)
    const dateButtons = [];
    for (let i = 0; i < dates.length; i += 3) {
        const row = dates.slice(i, i + 3).map(date => {
            const day = String(date.getDate()).padStart(2, '0');
            const month = String(date.getMonth() + 1).padStart(2, '0');
            return `üìÖ ${day}.${month}`;
        });
        dateButtons.push(row);
    }

    // Add "Choose another date" button and back button
    dateButtons.push(['üìÖ –î—Ä—É–≥–∞—è –¥–∞—Ç–∞']);
    dateButtons.push(['üîô –ù–∞–∑–∞–¥']);

    const customDateKeyboard = Markup.keyboard(dateButtons).resize();

    await ctx.reply(
        '–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–æ—Å—Ç–∞–≤–∫–∏:',
        customDateKeyboard
    );
});

// Handle specific date buttons
orderScene.hears(/^üìÖ (\d{2})\.(\d{2})$/, async (ctx) => {
    const userId = ctx.from.id;
    const { amount, pricePerKg, deliveryFee, subtotal, totalPrice } = ctx.scene.state;
    const [, day, month] = ctx.match;
    
    // Get current year
    const year = new Date().getFullYear();
    
    // Create delivery date
    const deliveryDate = new Date(year, parseInt(month) - 1, parseInt(day));
    
    const success = await addOrder(
        userId,
        userData[userId].venueId,
        userData[userId].address,
        amount,
        deliveryDate.toISOString().split('T')[0],
        new Date().toISOString()
    );

    if (success) {
        await ctx.reply(
            `–ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω!\n\n` +
            `–ó–∞–≤–µ–¥–µ–Ω–∏–µ: ${userData[userId].venueName}\n` +
            `–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${amount} –∫–≥\n` +
            `–¶–µ–Ω–∞: ${pricePerKg} —Å–æ–º/–∫–≥\n` +
            `–ü–æ–¥—ã—Ç–æ–≥: ${subtotal} —Å–æ–º\n` +
            `–î–æ—Å—Ç–∞–≤–∫–∞: ${deliveryFee} —Å–æ–º\n` +
            `–ò—Ç–æ–≥–æ —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π: ${totalPrice} —Å–æ–º\n` +
            `–ê–¥—Ä–µ—Å: ${userData[userId].address}\n` +
            `–î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏: ${deliveryDate.toLocaleDateString()}`,
            keyboards.main
        );
        await ctx.scene.leave();
    } else {
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
});

// Handle "Choose another date" button
orderScene.hears('üìÖ –î—Ä—É–≥–∞—è –¥–∞—Ç–∞', async (ctx) => {
    await ctx.reply(
        '–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –¥–æ—Å—Ç–∞–≤–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì\n' +
        '–ù–∞–ø—Ä–∏–º–µ—Ä: 25.03.2024',
        keyboards.back
    );
});

// Register scenes
const stage = new Scenes.Stage([venueScene, addressScene, orderScene]);

// Middleware
bot.use(session());
bot.use(stage.middleware());

// Command handlers
bot.command('start', async (ctx) => {
    const { id: userId, username } = ctx.from;
    
    if (!userData[userId]) {
        userData[userId] = {
            username: username || `user${userId}`,
            isRegistered: false
        };
        saveUserData();
    }
    
    if (userData[userId].isRegistered) {
        await ctx.reply(
            `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –∑–∞–∫–∞–∑–∞ –ª—å–¥–∞!\n\n` +
            `–¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ:\n` +
            `–ó–∞–≤–µ–¥–µ–Ω–∏–µ: ${userData[userId].venueName}\n` +
            `–ê–¥—Ä–µ—Å: ${userData[userId].address}\n\n` +
            `–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?`,
            keyboards.main
        );
    } else {
        await ctx.reply(
            '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –∑–∞–∫–∞–∑–∞ –ª—å–¥–∞!\n\n' +
            '–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –∑–∞–≤–µ–¥–µ–Ω–∏–µ.\n' +
            '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–≤–µ–¥–µ–Ω–∏—è:',
            keyboards.back
        );
        await ctx.scene.enter('venue');
    }
});

// Message handlers
bot.hears('‚ùÑÔ∏è –ó–∞–∫–∞–∑–∞—Ç—å –ª—ë–¥ ‚ùÑÔ∏è', async (ctx) => {
    const userId = ctx.from.id;
    
    if (!userData[userId]?.isRegistered) {
        await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ –∑–∞–≤–µ–¥–µ–Ω–∏–µ.', keyboards.main);
        await ctx.scene.enter('venue');
        return;
    }
    
    await ctx.scene.enter('order');
});

// Handle cancel order
bot.hears('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑', async (ctx) => {
    const userId = ctx.from.id;
    const activeOrders = await getActiveOrders(userId);
    
    if (activeOrders.length === 0) {
        await ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.');
        return;
    }

    // Create keyboard with active orders (each order in its own row)
    const keyboard = activeOrders.map(order => [{
        text: `–ó–∞–∫–∞–∑ ‚Ññ${order.index} - ${order.amount} –∫–≥ (${order.deliveryDate})`
    }]);
    
    // Add back button
    keyboard.push([{ text: 'üîô –ù–∞–∑–∞–¥' }]);

    await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑ –¥–ª—è –æ—Ç–º–µ–Ω—ã:', {
        reply_markup: {
            keyboard: keyboard,
            resize_keyboard: true
        }
    });
});

// Handle back button in cancel order menu
bot.hears('üîô –ù–∞–∑–∞–¥', async (ctx) => {
    await ctx.reply('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', keyboards.main);
});

// Test commands for debugging (ADMIN ONLY)
const ADMIN_IDS = ['532746965']; // Add your Telegram ID here

const isAdmin = (userId) => ADMIN_IDS.includes(userId.toString());

bot.command('test_orders', async (ctx) => {
    if (!isAdmin(ctx.from.id)) {
        await ctx.reply('‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ');
        return;
    }

    console.log('Creating test orders...');
    const userId = ctx.from.id;
    
    try {
        // Create order for today
        const today = new Date();
        console.log('Creating order for today:', today.toISOString().split('T')[0]);
        await addOrder(
            userId,
            userId.toString(),
            'Test Address 1',
            50,
            today.toISOString().split('T')[0],
            new Date().toISOString()
        );

        // Create order for tomorrow
        const tomorrow = new Date();
        tomorrow.setDate(tomorrow.getDate() + 1);
        console.log('Creating order for tomorrow:', tomorrow.toISOString().split('T')[0]);
        await addOrder(
            userId,
            userId.toString(),
            'Test Address 2',
            70,
            tomorrow.toISOString().split('T')[0],
            new Date().toISOString()
        );

        // Create order for day after tomorrow
        const dayAfterTomorrow = new Date();
        dayAfterTomorrow.setDate(dayAfterTomorrow.getDate() + 2);
        console.log('Creating order for day after tomorrow:', dayAfterTomorrow.toISOString().split('T')[0]);
        await addOrder(
            userId,
            userId.toString(),
            'Test Address 3',
            90,
            dayAfterTomorrow.toISOString().split('T')[0],
            new Date().toISOString()
        );

        await ctx.reply(
            '‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã —Å–æ–∑–¥–∞–Ω—ã:\n' +
            `1. –ù–∞ —Å–µ–≥–æ–¥–Ω—è (${today.toISOString().split('T')[0]}) - 50 –∫–≥\n` +
            `2. –ù–∞ –∑–∞–≤—Ç—Ä–∞ (${tomorrow.toISOString().split('T')[0]}) - 70 –∫–≥\n` +
            `3. –ù–∞ –ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞ (${dayAfterTomorrow.toISOString().split('T')[0]}) - 90 –∫–≥\n\n` +
            '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /check_state —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤.'
        );
        console.log('Test orders created successfully');
    } catch (error) {
        console.error('Error creating test orders:', error);
        await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤');
    }
});

bot.command('check_state', async (ctx) => {
    if (!isAdmin(ctx.from.id)) {
        await ctx.reply('‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ');
        return;
    }

    console.log('Checking system state...');
    try {
        // Get orders from Archive
        const archiveResponse = await sheets.spreadsheets.values.get({
            spreadsheetId: process.env.SPREADSHEET_ID,
            range: '–ê—Ä—Ö–∏–≤!A:I'
        });

        // Get orders from Orders
        const ordersResponse = await sheets.spreadsheets.values.get({
            spreadsheetId: process.env.SPREADSHEET_ID,
            range: '–ó–∞–∫–∞–∑—ã!A:I'
        });

        const today = new Date().toISOString().split('T')[0];
        
        const archiveRows = archiveResponse.data.values || [];
        const ordersRows = ordersResponse.data.values || [];
        
        // Count orders by status and date
        const stats = {
            archive: {
                total: archiveRows.length - 1,
                active: 0,
                canceled: 0,
                future: 0
            },
            orders: {
                total: ordersRows.length - 1,
                active: 0,
                canceled: 0
            }
        };

        // Process Archive orders
        archiveRows.slice(1).forEach(row => {
            if (row[6] === '–ù–æ–≤—ã–π') {
                stats.archive.active++;
                if (row[4] > today) {
                    stats.archive.future++;
                }
            } else if (row[6] === '–û—Ç–º–µ–Ω–µ–Ω') {
                stats.archive.canceled++;
            }
        });

        // Process Orders
        ordersRows.slice(1).forEach(row => {
            if (row[6] === '–ù–æ–≤—ã–π') {
                stats.orders.active++;
            } else if (row[6] === '–û—Ç–º–µ–Ω–µ–Ω') {
                stats.orders.canceled++;
            }
        });

        await ctx.reply(
            'üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã:\n\n' +
            'üìÅ –ê—Ä—Ö–∏–≤ –∑–∞–∫–∞–∑–æ–≤:\n' +
            `‚Ä¢ –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: ${stats.archive.total}\n` +
            `‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: ${stats.archive.active}\n` +
            `‚Ä¢ –û—Ç–º–µ–Ω–µ–Ω–Ω—ã—Ö: ${stats.archive.canceled}\n` +
            `‚Ä¢ –ë—É–¥—É—â–∏—Ö: ${stats.archive.future}\n\n` +
            'üìã –ó–∞–∫–∞–∑—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n' +
            `‚Ä¢ –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: ${stats.orders.total}\n` +
            `‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: ${stats.orders.active}\n` +
            `‚Ä¢ –û—Ç–º–µ–Ω–µ–Ω–Ω—ã—Ö: ${stats.orders.canceled}\n\n` +
            `–¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞: ${today}`
        );
        
        console.log('System state checked successfully', stats);
    } catch (error) {
        console.error('Error checking system state:', error);
        await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã');
    }
});

bot.command('update_orders', async (ctx) => {
    if (!isAdmin(ctx.from.id)) {
        await ctx.reply('‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ');
        return;
    }

    console.log('Manual update triggered by user:', ctx.from.id);
    try {
        await updateTodayOrders();
        await ctx.reply('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!');
        console.log('Manual update completed successfully');
    } catch (error) {
        console.error('Error updating orders:', error);
        await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤');
    }
});

// Debug handler for all text messages
bot.on('text', (ctx) => {
    // Only log if we're not in a scene and it's not a command
    if (!ctx.scene.current && !ctx.message.text.startsWith('/')) {
        console.log('Received text message (DEBUG):', ctx.message.text);
        console.log('Message type (DEBUG):', ctx.message.text);
        console.log('User ID (DEBUG):', ctx.from.id);
    }
});

// Order command
bot.command('order', async (ctx) => {
    await ctx.scene.enter('order');
});

// Address command
bot.command('address', async (ctx) => {
    await ctx.scene.enter('venue');
});

// Update main menu handler
bot.hears('üìç –ò–∑–º–µ–Ω–∏—Ç—å –∞–¥—Ä–µ—Å', async (ctx) => {
    console.log('Address change button pressed');
    await ctx.scene.enter('address');
});

// Error handling
bot.catch((err, ctx) => {
    console.error(`Error for ${ctx.updateType}:`, err);
});

// Start bot
async function startBot() {
    try {
        await initializeSheet();

        schedule.scheduleJob('0 0 * * *', async () => {
            try {
                await updateTodayOrders();
                console.log('Daily orders update completed');
            } catch (error) {
                console.error('Error in daily orders update:', error);
            }
        });

        await updateTodayOrders();
        await bot.launch();
        console.log('Bot started');
    } catch (error) {
        console.error('Error starting bot:', error);
        process.exit(1);
    }
}

startBot();

// Graceful shutdown
process.once('SIGINT', () => {
    schedule.gracefulShutdown()
        .then(() => bot.stop('SIGINT'));
});
process.once('SIGTERM', () => {
    schedule.gracefulShutdown()
        .then(() => bot.stop('SIGTERM'));
});